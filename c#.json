{
    "seed con csv": {
        "prefix": "seedScv",
        "body": [
          "using System.Globalization;",
          "using System.Reflection;",
          "using CsvHelper;",
          "using Domain.Entities;",
          "using Microsoft.Extensions.Logging;",
          "",
          "namespace Persistence;",
          "",
          "public class JwtAppContextSeed",
          "{",
          "public static async Task SeedAsync(JwtAppContext context, ILoggerFactory loggerFactory)",
          "    {",
          "        try",
          "        {",
          "            var ruta = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);",
          "",
          "            if (!context.Marcas.Any())",
          "            {",
          "                using (var readerMarcas = new StreamReader(ruta + @\"/Data/Csvs/marcas.csv\"))",
          "                {",
          "                    using (var csvMarcas = new CsvReader(readerMarcas, CultureInfo.InvariantCulture))",
          "                    {",
          "                        var marcas = csvMarcas.GetRecords<Marca>();",
          "                        context.Marcas.AddRange(marcas);",
          "                        await context.SaveChangesAsync();",
          "                    }",
          "                }",
          "            }",
          "",
          "            if (!context.Categorias.Any())",
          "            {",
          "                using (var readerCategorias = new StreamReader(ruta + @\"/Data/Csvs/categorias.csv\"))",
          "                {",
          "                    using (var csvCategorias = new CsvReader(readerCategorias, CultureInfo.InvariantCulture))",
          "                    {",
          "                        var categorias = csvCategorias.GetRecords<Categoria>();",
          "                        context.Categorias.AddRange(categorias);",
          "                        await context.SaveChangesAsync();",
          "                    }",
          "                }",
          "            }",
          "",
          "            if (!context.Productos.Any())",
          "            {",
          "                using (var readerProductos = new StreamReader(ruta + @\"/Data/Csvs/productos.csv\"))",
          "                {",
          "                    using (var csvProductos = new CsvReader(readerProductos, CultureInfo.InvariantCulture))",
          "                    {",
          "                        var listadoProductosCsv = csvProductos.GetRecords<Producto>();",
          "",
          "                        List<Producto> productos = new List<Producto>();",
          "                        foreach (var item in listadoProductosCsv)",
          "                        {",
          "                            productos.Add(new Producto",
          "                            {",
          "                                Id = item.Id,",
          "                                Nombre = item.Nombre,",
          "                                Precio = item.Precio,",
          "                                FechaCreacion = item.FechaCreacion,",
          "                                CategoriaId = item.CategoriaId,",
          "                                MarcaId = item.MarcaId                        ",
          "                            });",
          "                        }",
          "",
          "                        context.Productos.AddRange(productos);",
          "                        await context.SaveChangesAsync();",
          "                    }",
          "                }",
          "            }",
          "",
          "",
          "        }",
          "        catch (Exception ex)",
          "        {",
          "            var logger = loggerFactory.CreateLogger<JwtAppContext>();",
          "            logger.LogError(ex.Message);",
          "        }",
          "    }",
          "",
          "    public static async Task SeedRolesAsync(JwtAppContext context, ILoggerFactory loggerFactory)",
          "    {",
          "        try",
          "        {",
          "            if (!context.Rols.Any())",
          "            {",
          "                var roles = new List<Rol>()",
          "                        {",
          "                            new Rol{Id=1, Nombre=\"Aministrator\"},",
          "                            new Rol{Id=2, Nombre=\"Customer\"},",
          "                            new Rol{Id=3, Nombre=\"Employee\"},",
          "                        };",
          "                context.Rols.AddRange(roles);",
          "                await context.SaveChangesAsync();",
          "            }",
          "        }",
          "        catch (Exception ex)",
          "        {",
          "            var logger = loggerFactory.CreateLogger<JwtAppContext>();",
          "            logger.LogError(ex.Message);",
          "        }",
          "    }",
          "}"
        ],
        "description": "seed con csv"
      },
      "todo el contenido del DbContext": {
        "prefix": "DataDbContext",
        "body": [
          ": DbContext",
          "{",
          "        public $1(DbContextOptions options) : base(options)",
          "        {",
          "        }",
          "        public DbSet<$2> $3 { get; set; }",
          "        protected override void OnModelCreating(ModelBuilder modelBuilder)",
          "        {",
          "            base.OnModelCreating(modelBuilder);",
          "",
          "            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
          "        }",
          "",
          "}",
          ""
        ],
        "description": "todo el contenido del DbContext"
      },
      "Guia Configuration": {
        "prefix": "DataConfiguration",
        "body": [
          ": IEntityTypeConfiguration<$1>",
          "        {",
          "            public void Configure(EntityTypeBuilder<$1> builder)",
          "            {",
          "                builder.ToTable(\"$2\");",
          "    ",
          "                builder.HasKey(e => e.Id);",
          "",
          "                builder.Property(e => e.$3)",
          "                .HasColumnName(\"$4\")",
          "                .HasColumnType(\"$5\")",
          "                .HasMaxLength($6)",
          "                .IsRequired();",
          "            }",
          "        }",
          ""
        ],
        "description": "Guia Configuration"
      },
      "One Many Configuration": {
        "prefix": "one-to-many",
        "body": [
          "builder.HasOne(p => p.$1)",
          ".WithMany(p => p.$2)",
          ".HasForeignKey(p => p.$3);"
        ],
        "description": "Snippet for Marca Configuration"
      },
      "de uno a uno": {
        "prefix": "one-to-one",
        "body": [
          "builder.HasOne(e => e.$1)",
          ".WithOne(p => p.$2)",
          ".HasForeignKey<Jugador>(p => p.$3);"
        ],
        "description": "de uno a uno"
      },
      "Ratelimiting Configuration": {
        "prefix": "ConfigureRatelimiting",
        "body": [
          "public static void ConfigureRatelimiting(this IServiceCollection services)",
          "{",
          "    services.AddMemoryCache();",
          "    services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
          "    services.AddInMemoryRateLimiting();",
          "    services.Configure<IpRateLimitOptions>(options =>",
          "    {",
          "        options.EnableEndpointRateLimiting = true;",
          "        options.StackBlockedRequests = false;",
          "        options.HttpStatusCode = 429;",
          "        options.RealIpHeader = \"X-Real-IP\";",
          "        options.GeneralRules = new List<RateLimitRule>",
          "        {",
          "            new RateLimitRule",
          "            {",
          "                Endpoint = \"*\",",
          "                Period = \"10s\",",
          "                Limit = 2",
          "            }",
          "        };",
          "    });",
          "}"
          ],
          "description": "Configures rate limiting using AspNetCoreRateLimit package."
      },
      "IGenericRepository": {
        "prefix": "IGenericRepo",
        "body": [
          "<T> where T : BaseEntity",
          "{",
          "\tTask<T> GetByIdAsync(int id);",
          "\tTask<IEnumerable<T>> GetAllAsync();",
          "\tIEnumerable<T> Find(Expression<Func<T, bool>> expression);",
          "\tvoid Add(T entity);",
          "\tvoid AddRange(IEnumerable<T> entities);",
          "\tvoid Remove(T entity);",
          "\tvoid RemoveRange(IEnumerable<T> entities);",
          "\tvoid Update(T entity);",
          "}"
        ],
        "description": "Interface for Generic Repository"
      },
      "RepoGenerico": {
        "prefix": "GenericRepo",
        "body": [
          "<T> : IGenericRepo<T> where T : BaseEntity",
          "{",
          "\tprivate readonly $1 _context;",
          "",
          "\tpublic GenericRepo($1 context)",
          "\t{",
          "\t\t_context = context;",
          "\t}",
          "",
          "\tpublic virtual void Add(T entity)",
          "\t{",
          "\t\t_context.Set<T>().Add(entity);",
          "\t}",
          "",
          "\tpublic virtual void AddRange(IEnumerable<T> entities)",
          "\t{",
          "\t\t_context.Set<T>().AddRange(entities);",
          "\t}",
          "",
          "\tpublic virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)",
          "\t{",
          "\t\treturn _context.Set<T>().Where(expression);",
          "\t}",
          "",
          "\tpublic virtual async Task<IEnumerable<T>> GetAllAsync()",
          "\t{",
          "\t\treturn await _context.Set<T>().ToListAsync();",
          "\t}",
          "",
          "\tpublic virtual async Task<T> GetByIdAsync(int id)",
          "\t{",
          "\t\treturn await _context.Set<T>().FindAsync(id);",
          "\t}",
          "",
          "\tpublic virtual Task<T> GetByIdAsync(string id)",
          "\t{",
          "\t\tthrow new NotImplementedException();",
          "\t}",
          "",
          "\tpublic virtual void Remove(T entity)",
          "\t{",
          "\t\t_context.Set<T>().Remove(entity);",
          "\t}",
          "",
          "\tpublic virtual void RemoveRange(IEnumerable<T> entities)",
          "\t{",
          "\t\t_context.Set<T>().RemoveRange(entities);",
          "\t}",
          "",
          "\tpublic virtual void Update(T entity)",
          "\t{",
          "\t\t_context.Set<T>()",
          "\t\t\t.Update(entity);",
          "\t}",
          "}"
        ],
        "description": "Snippet for GenericRepositoryA class"
      },
      "guia de repositorio para user": {
        "prefix": "GenericRepo<User>",
        "body": [
          ": GenericRepo<User>, IUser",
          "{",
          "    private readonly $1 _context;",
          "",
          "    public UserRepository($1 context) : base(context)",
          "    {",
          "        _context = context;",
          "    }",
          "",
          "    public async Task<User> GetByRefreshTokenAsync(string refreshToken)",
          "    {",
          "        return await _context.Users",
          "            .Include(u => u.Rols)",
          "            .Include(u => u.RefreshTokens)",
          "            .FirstOrDefaultAsync(u => u.RefreshTokens.Any(t => t.Token == refreshToken));",
          "    }",
          "",
          "    public async Task<User> GetByUsernameAsync(string username)",
          "    {",
          "        return await _context.Users",
          "            .Include(u => u.Rols)",
          "            .Include(u => u.RefreshTokens)",
          "            .FirstOrDefaultAsync(u => u.Username.ToLower() == username.ToLower());",
          "    }",
          "}"
        ],
        "description": "guia de repositorio para user"
      },
      "guia de repositorio para Rol": {
        "prefix": "GenericRepo<Rol>",
        "body": [
          ": GenericRepo<Rol>, IRol",
          "{",
          "    private readonly $1 _context;",
          "",
          "    public RolRepository($1 context) : base(context)",
          "    {",
          "       _context = context;",
          "    }",
          "}"
        ],
        "description": "guia de repositorio para Rol"
      },
      "profiles ": {
        "prefix": "profile",
        "body": [
          ": Profile",
          "    {",
          "        public MappingProfiles()",
          "        {",
          "            CreateMap<$1, $1Dto>().ReverseMap();",
          "    }",
          ""
        ],
        "description": "profiles "
      },
      "metodo ForMember ": {
        "prefix": "ForMember",
        "body": [
          ".ForMember(dest => dest.$1, origen => origen.MapFrom(origen=> origen.$1.$2))",
          ""
        ],
        "description": "metodo ForMember "
      },
      "metodo ForMember Ignore": {
        "prefix": "ForMemberIgnore",
        "body": [
          ".ForMember(origen => origen.$1, dest => dest.Ignore())",
          "",
          ""
        ],
        "description": "metodo ForMember Ignore"
      },
      "Data de JWT": {
        "prefix": "JWT",
        "body": [
          "public string Key { get; set; }",
          "    public string Issuer { get; set; }",
          "    public string Audience { get; set; }",
          "    public double DurationInMinutes { get; set; }  "
        ],
        "description": "Data de JWT"
      },
      "metodos para las excepciones": {
        "prefix": "ExceptionMiddleware",
        "body": [
          "private readonly RequestDelegate _next;",
          "    private readonly ILogger<ExceptionMiddleware> _logger;",
          "    private readonly IHostEnvironment _env;",
          "",
          "    public ExceptionMiddleware(RequestDelegate next,",
          "        ILogger<ExceptionMiddleware> logger, IHostEnvironment env)",
          "    {",
          "        _next = next;",
          "        _logger = logger;",
          "        _env = env;",
          "    }",
          "",
          "    public async Task InvokeAsync(HttpContext context)",
          "    {",
          "        try",
          "        {",
          "            await _next(context);",
          "        }",
          "        catch (Exception ex)",
          "        {",
          "            var statusCode = (int)HttpStatusCode.InternalServerError;",
          "",
          "            _logger.LogError(ex, ex.Message);",
          "            context.Response.ContentType = \"application/json\";",
          "            context.Response.StatusCode = statusCode;",
          "",
          "            var response = _env.IsDevelopment()",
          "                            ? new ApiException(statusCode, ex.Message, ex.StackTrace.ToString())",
          "                            : new ApiException(statusCode);",
          "",
          "            var options = new JsonSerializerOptions",
          "            {",
          "                PropertyNamingPolicy = JsonNamingPolicy.CamelCase",
          "            };",
          "            var json = JsonSerializer.Serialize(response, options);",
          "",
          "            await context.Response.WriteAsync(json);",
          "",
          "        }",
          "    }"
        ],
        "description": "metodos para las excepciones"
      },
      "metodos de la Autorizacion de roles": {
        "prefix": "Authorization",
        "body": [
          "public enum Roles",
          "    {",
          "        $1,",
          "        $2,",
          "        $3",
          "    }",
          "",
          "    public const Roles rol_default = Roles.$3;",
          ""
        ],
        "description": "metodos de la Autorizacion de roles"
      },
      "metodos de ApiResponse": {
        "prefix": "ApiResponse",
        "body": [
          "public int StatusCode { get; set; }",
          "    public string Message { get; set; }",
          "",
          "    public ApiResponse(int statusCode, string message = null)",
          "    {",
          "        StatusCode = statusCode;",
          "        Message = message ?? GetDefaultMessage(statusCode);",
          "    }",
          "",
          "    public ApiResponse()",
          "    {",
          "    }",
          "",
          "    private string GetDefaultMessage(int statusCode)",
          "    {",
          "        return statusCode switch",
          "        {",
          "            400 => \"Has realizado una petición incorrecta.\",",
          "            401 => \"Usuario no autorizado.\",",
          "            404 => \"El recurso que has intentado solicitar no existe.\",",
          "            405 => \"Este método HTTP no está permitido en el servidor.\",",
          "            500 => \"Error en el servidor. No eres tú, soy yo. Comunícate con el administrador XD.\",",
          "            _ => throw new NotImplementedException()",
          "        };",
          "    }"
        ],
        "description": "metodos de ApiResponse"
      },
      "metodos de ApiException": {
        "prefix": "ApiException",
        "body": [
          ": ApiResponse",
          "{",
          "    public ApiException(int statusCode, string message = null, string details = null)",
          "                    : base(statusCode, message)",
          "    {",
          "        Details = details;",
          "    }",
          "",
          "    public string Details { get; set; }",
          "}",
          ""
        ],
        "description": "metodos de ApiException"
      },
      "metodo de ConfigureCors": {
        "prefix": "ConfigureCors",
        "body": [
          "public static void ConfigureCors(this IServiceCollection services) =>",
          "        services.AddCors(options =>",
          "        {",
          "            options.AddPolicy(\"CorsPolicy\", builder =>",
          "                builder.AllowAnyOrigin()    //WithOrigins(\"https://domain.com\")",
          "                    .AllowAnyMethod()       //WithMethods(\"GET\",\"POST)",
          "                    .AllowAnyHeader());     //WithHeaders(\"accept\",\"content-type\")",
          "        });"
        ],
        "description": "metodo de ConfigureCors"
      },
      "metodo de AddAplicacionServices": {
        "prefix": "AddAplicacionServices",
        "body": [
          "public static void AddAplicacionServices(this IServiceCollection services)",
          "    {",
          "        services.AddScoped<IPasswordHasher<User>, PasswordHasher<User>>();",
          "        services.AddScoped<IUserService, UserService>();",
          "        services.AddScoped<IUnitOfWork, UnitOfWork>();",
          "    }"
        ],
        "description": "metodo de AddAplicacionServices"
      },
      "metodo de AddJwt": {
        "prefix": "AddJwt",
        "body": [
          "public static void AddJwt(this IServiceCollection services, IConfiguration configuration)",
          "    {",
          "        //Configuration from AppSettings",
          "        services.Configure<JWT>(configuration.GetSection(\"JWT\"));",
          "",
          "        //Adding Athentication - JWT",
          "        services.AddAuthentication(options =>",
          "        {",
          "            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;",
          "            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;",
          "        })",
          "            .AddJwtBearer(o =>",
          "            {",
          "                o.RequireHttpsMetadata = false;",
          "                o.SaveToken = false;",
          "                o.TokenValidationParameters = new TokenValidationParameters",
          "                {",
          "                    ValidateIssuerSigningKey = true,",
          "                    ValidateIssuer = true,",
          "                    ValidateAudience = true,",
          "                    ValidateLifetime = true,",
          "                    ClockSkew = TimeSpan.Zero,",
          "                    ValidIssuer = configuration[\"JWT:Issuer\"],",
          "                    ValidAudience = configuration[\"JWT:Audience\"],",
          "                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration[\"JWT:Key\"]))",
          "                };",
          "            });",
          "    }"
        ],
        "description": "metodo de AddJwt"
      },
      "metodo de ConfigureRateLimiting": {
   "prefix": "ConfigureRateLimiting",
   "body": [
     " public static void ConfigureRateLimiting(this IServiceCollection services)",
     "    {",
     "        services.AddMemoryCache();",
     "        services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
     "        services.AddInMemoryRateLimiting();",
     "        services.Configure<IpRateLimitOptions>(options =>",
     "        {",
     "            options.EnableEndpointRateLimiting = true;",
     "            options.StackBlockedRequests = true;",
     "            options.HttpStatusCode =429;",
     "            options.RealIpHeader = \"X-real-ip\";",
     "            options.GeneralRules = new List<RateLimitRule>",
     "            {",
     "                new RateLimitRule",
     "                {",
     "                    Endpoint = \"*\",",
     "                    Period = \"10s\",",
     "                    Limit = 999999",
     "                }",
     "            };",
     "        });",
     "    }"
   ],
   "description": "metodo de ConfigureRateLimiting"
   },
   "metodo de ConfigureApiVersioning": {
     "prefix": "ConfigureApiVersioning",
     "body": [
       "public static void ConfigureApiVersioning(this IServiceCollection services)",
       "    {",
       "        services.AddApiVersioning(options =>",
       "        {",
       "            options.DefaultApiVersion = new ApiVersion(1, 0);",
       "            options.AssumeDefaultVersionWhenUnspecified = true;",
       "            options.ApiVersionReader = new QueryStringApiVersionReader(\"ver\");",
       "        });",
       "    }"
     ],
     "description": "metodo de ConfigureApiVersioning"
   },
   "metodo total de UserController": {
     "prefix": "UserController",
     "body": [
       ": ApiBaseController",
       "{",
       "    private readonly IUserService _userService;",
       "",
       "    public UserController(IUserService userService)",
       "    {",
       "        _userService = userService;",
       "    }",
       "        [HttpPost(\"register\")]",
       "    public async Task<ActionResult> RegisterAsync(RegisterDto model)",
       "    {",
       "        var result = await _userService.RegisterAsync(model);",
       "        return Ok(result);",
       "    }",
       "",
       "    [HttpPost(\"token\")]",
       "    public async Task<IActionResult> GetTokenAsync(LoginDto model)",
       "    {",
       "        var result = await _userService.GetTokenAsync(model);",
       "        SetRefreshTokenInCookie(result.RefreshToken);",
       "        return Ok(result);",
       "    }",
       "",
       "    [HttpPost(\"addrole\")]",
       "    public async Task<IActionResult> AddRoleAsync(AddRoleDto model)",
       "    {",
       "        var result = await _userService.AddRoleAsync(model);",
       "        return Ok(result);",
       "    }",
       "",
       "    [HttpPost(\"refresh-token\")]",
       "    public async Task<IActionResult> RefreshToken()",
       "    {",
       "        var refreshToken = Request.Cookies[\"refreshToken\"];",
       "        var response = await _userService.RefreshTokenAsync(refreshToken);",
       "        if (!string.IsNullOrEmpty(response.RefreshToken))",
       "            SetRefreshTokenInCookie(response.RefreshToken);",
       "        return Ok(response);",
       "    }",
       "",
       "",
       "    private void SetRefreshTokenInCookie(string refreshToken)",
       "    {",
       "        var cookieOptions = new CookieOptions",
       "        {",
       "            HttpOnly = true,",
       "            Expires = DateTime.UtcNow.AddDays(10),",
       "        };",
       "        Response.Cookies.Append(\"refreshToken\", refreshToken, cookieOptions);",
       "    }",
       "    ",
       "}",
       ""
     ],
     "description": "metodo total de UserController"
   },
   "metodo total de UserService": {
     "prefix": "UserService",
     "body": [
       ": IUserService",
       "{",
       "    private readonly JWT _jwt;",
       "    private readonly IUnitOfWork _unitOfWork;",
       "    private readonly IPasswordHasher<User> _passwordHasher;",
       "    public UserService(IUnitOfWork unitOfWork, IOptions<JWT> jwt, IPasswordHasher<User> passwordHasher)",
       "    {",
       "        _jwt = jwt.Value;",
       "        _unitOfWork = unitOfWork;",
       "        _passwordHasher = passwordHasher;",
       "    }",
       "    public async Task<string> RegisterAsync(RegisterDto registerDto)",
       "    {",
       "        var user = new User",
       "        {",
       "            Email = registerDto.Email,",
       "            Username = registerDto.Username",
       "        };",
       "",
       "        user.Password = _passwordHasher.HashPassword(user, registerDto.Password); //Encrypt password",
       "",
       "        var existingUser = _unitOfWork.Users",
       "                                    .Find(u => u.Username.ToLower() == registerDto.Username.ToLower())",
       "                                    .FirstOrDefault();",
       "",
       "        if (existingUser == null)",
       "        {",
       "           /*  var rolDefault = _unitOfWork.Roles",
       "                                    .Find(u => u.Nombre == Authorization.rol_default.ToString())",
       "                                    .First(); */",
       "            try",
       "            {",
       "/*                 user.Rols.Add(rolDefault);",
       " */             _unitOfWork.Users.Add(user);",
       "                await _unitOfWork.SaveAsync();",
       "",
       "                return $\"User  {registerDto.Username} has been registered successfully\";",
       "            }",
       "            catch (Exception ex)",
       "            {",
       "                var message = ex.Message;",
       "                return $\"Error: {message}\";",
       "            }",
       "        }",
       "        else",
       "        {",
       "            return $\"User {registerDto.Username} already registered.\";",
       "        }",
       "    }",
       "    public async Task<DataUserDto> GetTokenAsync(LoginDto model)",
       "    {",
       "        DataUserDto dataUserDto = new DataUserDto();",
       "        var user = await _unitOfWork.Users",
       "                    .GetByUsernameAsync(model.Username);",
       "",
       "        if (user == null)",
       "        {",
       "            dataUserDto.IsAuthenticated = false;",
       "            dataUserDto.Message = $\"User does not exist with username {model.Username}.\";",
       "            return dataUserDto;",
       "        }",
       "",
       "        var result = _passwordHasher.VerifyHashedPassword(user, user.Password, model.Password);",
       "",
       "        if (result == PasswordVerificationResult.Success)",
       "        {",
       "            dataUserDto.IsAuthenticated = true;",
       "            JwtSecurityToken jwtSecurityToken = CreateJwtToken(user);",
       "            dataUserDto.Token = new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken);",
       "            dataUserDto.Email = user.Email;",
       "            dataUserDto.UserName = user.Username;",
       "            dataUserDto.Roles = user.Rols",
       "                                            .Select(u => u.Nombre)",
       "                                            .ToList();",
       "",
       "            if (user.RefreshTokens.Any(a => a.IsActive))",
       "            {",
       "                var activeRefreshToken = user.RefreshTokens.Where(a => a.IsActive == true).FirstOrDefault();",
       "                dataUserDto.RefreshToken = activeRefreshToken.Token;",
       "                dataUserDto.RefreshTokenExpiration = activeRefreshToken.Expires;",
       "            }",
       "            else",
       "            {",
       "                var refreshToken = CreateRefreshToken();",
       "                dataUserDto.RefreshToken = refreshToken.Token;",
       "                dataUserDto.RefreshTokenExpiration = refreshToken.Expires;",
       "                user.RefreshTokens.Add(refreshToken);",
       "                _unitOfWork.Users.Update(user);",
       "                await _unitOfWork.SaveAsync();",
       "            }",
       "",
       "            return dataUserDto;",
       "        }",
       "        dataUserDto.IsAuthenticated = false;",
       "        dataUserDto.Message = $\"Credenciales incorrectas para el usuario {user.Username}.\";",
       "        return dataUserDto;",
       "    }",
       "    public async Task<string> AddRoleAsync(AddRoleDto model)",
       "    {",
       "",
       "        var user = await _unitOfWork.Users",
       "                    .GetByUsernameAsync(model.Username);",
       "        if (user == null)",
       "        {",
       "            return $\"User {model.Username} does not exists.\";",
       "        }",
       "",
       "        var result = _passwordHasher.VerifyHashedPassword(user, user.Password, model.Password);",
       "",
       "        if (result == PasswordVerificationResult.Success)",
       "        {",
       "            var rolExists = _unitOfWork.Roles",
       "                                        .Find(u => u.Nombre.ToLower() == model.Role.ToLower())",
       "                                        .FirstOrDefault();",
       "",
       "            if (rolExists != null)",
       "            {",
       "                var userHasRole = user.Rols",
       "                                            .Any(u => u.Id == rolExists.Id);",
       "",
       "                if (userHasRole == false)",
       "                {",
       "                    user.Rols.Add(rolExists);",
       "                    _unitOfWork.Users.Update(user);",
       "                    await _unitOfWork.SaveAsync();",
       "                }",
       "",
       "                return $\"Role {model.Role} added to user {model.Username} successfully.\";",
       "            }",
       "",
       "            return $\"Role {model.Role} was not found.\";",
       "        }",
       "        return $\"Invalid Credentials\";",
       "    }",
       "    public async Task<DataUserDto> RefreshTokenAsync(string refreshToken)",
       "    {",
       "        var dataUserDto = new DataUserDto();",
       "",
       "        var usuario = await _unitOfWork.Users",
       "                        .GetByRefreshTokenAsync(refreshToken);",
       "",
       "        if (usuario == null)",
       "        {",
       "            dataUserDto.IsAuthenticated = false;",
       "            dataUserDto.Message = $\"Token is not assigned to any user.\";",
       "            return dataUserDto;",
       "        }",
       "",
       "        var refreshTokenBd = usuario.RefreshTokens.Single(x => x.Token == refreshToken);",
       "",
       "        if (!refreshTokenBd.IsActive)",
       "        {",
       "            dataUserDto.IsAuthenticated = false;",
       "            dataUserDto.Message = $\"Token is not active.\";",
       "            return dataUserDto;",
       "        }",
       "        //Revoque the current refresh token and",
       "        refreshTokenBd.Revoked = DateTime.UtcNow;",
       "        //generate a new refresh token and save it in the database",
       "        var newRefreshToken = CreateRefreshToken();",
       "        usuario.RefreshTokens.Add(newRefreshToken);",
       "        _unitOfWork.Users.Update(usuario);",
       "        await _unitOfWork.SaveAsync();",
       "        //Generate a new Json Web Token",
       "        dataUserDto.IsAuthenticated = true;",
       "        JwtSecurityToken jwtSecurityToken = CreateJwtToken(usuario);",
       "        dataUserDto.Token = new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken);",
       "        dataUserDto.Email = usuario.Email;",
       "        dataUserDto.UserName = usuario.Username;",
       "        dataUserDto.Roles = usuario.Rols",
       "                                        .Select(u => u.Nombre)",
       "                                        .ToList();",
       "        dataUserDto.RefreshToken = newRefreshToken.Token;",
       "        dataUserDto.RefreshTokenExpiration = newRefreshToken.Expires;",
       "        return dataUserDto;",
       "    }",
       "    private RefreshToken CreateRefreshToken()",
       "    {",
       "        var randomNumber = new byte[32];",
       "        using (var generator = RandomNumberGenerator.Create())",
       "        {",
       "            generator.GetBytes(randomNumber);",
       "            return new RefreshToken",
       "            {",
       "                Token = Convert.ToBase64String(randomNumber),",
       "                Expires = DateTime.UtcNow.AddDays(10),",
       "                Created = DateTime.UtcNow",
       "            };",
       "        }",
       "    }",
       "    private JwtSecurityToken CreateJwtToken(User usuario)",
       "    {",
       "        var roles = usuario.Rols;",
       "        var roleClaims = new List<Claim>();",
       "        foreach (var role in roles)",
       "        {",
       "            roleClaims.Add(new Claim(\"roles\", role.Nombre));",
       "        }",
       "        var claims = new[]",
       "        {",
       "                                new Claim(JwtRegisteredClaimNames.Sub, usuario.Username),",
       "                                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),",
       "                                new Claim(JwtRegisteredClaimNames.Email, usuario.Email),",
       "                                new Claim(\"uid\", usuario.Id.ToString())",
       "                        }",
       "        .Union(roleClaims);",
       "        var symmetricSecurityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwt.Key));",
       "        var signingCredentials = new SigningCredentials(symmetricSecurityKey, SecurityAlgorithms.HmacSha256);",
       "        var jwtSecurityToken = new JwtSecurityToken(",
       "            issuer: _jwt.Issuer,",
       "            audience: _jwt.Audience,",
       "            claims: claims,",
       "            expires: DateTime.UtcNow.AddMinutes(_jwt.DurationInMinutes),",
       "            signingCredentials: signingCredentials);",
       "        return jwtSecurityToken;",
       "    }",
       "",
       "}",
       "",
       "    [HttpPost(\"refresh-token\")]",
       "    public async Task<IActionResult> RefreshToken()",
       "    {",
       "        var refreshToken = Request.Cookies[\"refreshToken\"];",
       "        var response = await _userService.RefreshTokenAsync(refreshToken);",
       "        if (!string.IsNullOrEmpty(response.RefreshToken))",
       "            SetRefreshTokenInCookie(response.RefreshToken);",
       "        return Ok(response);",
       "    }",
       "",
       "",
       "    private void SetRefreshTokenInCookie(string refreshToken)",
       "    {",
       "        var cookieOptions = new CookieOptions",
       "        {",
       "            HttpOnly = true,",
       "            Expires = DateTime.UtcNow.AddDays(10),",
       "        };",
       "        Response.Cookies.Append(\"refreshToken\", refreshToken, cookieOptions);",
       "    }",
       "    ",
       "}",
       ""
     ],
     "description": "metodo total de UserService"
   },
   "metodo total de IUserService": {
     "prefix": "IUserService",
     "body": [
       "",
       "{",
       "    Task<string> RegisterAsync(RegisterDto model);",
       "    Task<DataUserDto> GetTokenAsync(LoginDto model);",
       "    Task<string> AddRoleAsync(AddRoleDto model);",
       "    Task<DataUserDto> RefreshTokenAsync(string refreshToken);",
       "}",
       ""
     ],
     "description": "metodo total de IUserService"
   },
   "metodo total de Pager": {
     "prefix": "Pager",
     "body": [
       "<T> where T : class",
       "{",
       "    public string Search { get; set; }",
       "    public int PageIndex { get; set;}",
       "    public int PageSize { get; set;}",
       "    public int Total { get; set; }",
       "    public List<T> Registers { get; set; }",
       "",
       "    public Pager()",
       "    {",
       "    }",
       "",
       "    public Pager(List<T> registers, int total, int pageIndex, int pageSize, string search) ",
       "    {",
       "        Registers = registers;",
       "        Total = total;",
       "        PageIndex = pageIndex;",
       "        PageSize = pageSize;",
       "        Search = search; ",
       "    }",
       "",
       "    public int TotalPages",
       "    {",
       "        get",
       "        {",
       "            return (int)Math.Ceiling(Total / (double)PageSize);",
       "        }",
       "        set",
       "        {",
       "            this.TotalPages = value;",
       "        }",
       "    }",
       "",
       "    public bool HasPreviousPage",
       "    {",
       "        get",
       "        {",
       "            return (PageIndex > 1);",
       "        }",
       "        set",
       "        {",
       "            this.HasPreviousPage = value;",
       "        }",
       "    }",
       "    public bool HasNextPage",
       "    {",
       "        get",
       "        {",
       "            return( PageIndex < TotalPages);",
       "        }",
       "        set",
       "        {",
       "            this.HasNextPage = value;",
       "        }",
       "    }",
       "",
       "}",
       ""
     ],
     "description": "metodo total de Pager"
   },
   "metodo total de Params": {
     "prefix": "Params",
     "body": [
       "{",
       "    private int _pageSize =5;",
       "    private const int MaxPageSize = 50;",
       "    private int _pageIndex = 1;",
       "    private string _search;",
       "    ",
       "    public int PageSize",
       "    {",
       "        get => _pageSize;",
       "        set => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;",
       "    }",
       "",
       "    public int PageIndex",
       "    {",
       "        get => _pageIndex;",
       "        set => _pageIndex = (value <= 0) ? 0 : value;",
       "    }",
       "    public string Search",
       "    {",
       "        get => _search;",
       "        set => _search = (!string.IsNullOrEmpty(value))? value.ToLower(): \"\";",
       "    }",
       "}"
     ],
     "description": "metodo total de Params"
   },
   "Inyecciones de dependencias para program": {
     "prefix": "JWT/ApiVersion/ApiVersion",
     "body": [
       "/* ",
       "PROGRAM ApiVersion and ApiVersion",
       "builder.Services.ConfigureRateLimiting();",
       "builder.Services.ConfigureApiVersioning();",
       "app.UseIpRateLimiting();",
       "",
       "PROGRAM JWT",
       "var logger = new LoggerConfiguration()",
       "         .ReadFrom.Configuration(builder.Configuration)",
       "         .Enrich.FromLogContext()",
       "         .CreateLogger();",
       "builder.Logging.AddSerilog(logger);",
       "builder.Services.AddJwt(builder.Configuration);",
       "using (var scope = app.Services.CreateScope())",
       "{",
       " var services = scope.ServiceProvider;",
       " var loggerFactory = services.GetRequiredService<ILoggerFactory>();",
       " try",
       " {",
       "   var context = services.GetRequiredService<JwtAppContext>();",
       "   await context.Database.MigrateAsync();",
       "   await JwtAppContextSeed.SeedAsync(context,loggerFactory);",
       " }",
       " catch (Exception ex)",
       " {",
       "   var _logger = loggerFactory.CreateLogger<Program>();",
       "   _logger.LogError(ex, \"Ocurrio un error durante la migracion\");",
       " }",
       "}",
       "",
       "*/"
     ],
     "description": "Inyecciones de dependencias para program"
   },
   "HttpGet Action with ProducesResponseType": {
     "prefix": "Get",
     "body": [
       "[HttpGet]",
       "[ProducesResponseType(StatusCodes.Status200OK)]",
       "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
       "public async Task<ActionResult<IEnumerable<${1:nameClass}>>> Get()",
       "{",
       "    var ${2:nameVar} = await unitofwork.${3:nameDbSetContext}.GetAllAsync();",
       "    return mapper.Map<List<$1>>($2);",
       "}"
     ],
     "description": "HttpGet Action with ProducesResponseType"
   },
   "HttpGet Action with Route and ProducesResponseType": {
   "prefix": "GetId",
   "body": [
     "[HttpGet(\"{id}\")]",
     "[ProducesResponseType(StatusCodes.Status200OK)]",
     "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
 
     "public async Task<ActionResult<$1>> Get(int id)",
     "{",
     "    var ${2:nameVar} = await unitofwork.${3:nameDbSetContext}.GetByIdAsync(id);",
     "    if ($2 == null){",
     "       return NotFound();",
     "    }",
     "    return this.mapper.Map<$1>($2);",
     "}"
   ],
   "description": "HttpGet Action with Route and ProducesResponseType"
   },
   "Creacion de llave Compuesta": {
     "prefix": "keyCompuesta",
     "body": [
       "builder",
       ".HasMany(p => p.$1)",
       ".WithMany(p => p.$2)",
       ".UsingEntity<$3>(",
       "  j => j",
       "    .HasOne(pt => pt.$4)",
       "    .WithMany(t => t.$6)",
       "    .HasForeignKey(pt => pt.$7),",
       "  j => j",
       "    .HasOne(pt => pt.$5)",
       "    .WithMany(t => t.$6)",
       "    .HasForeignKey(pt => pt.$8),",
       "  j => ",
       "    {",
       "      j.HasKey(t => new {t.$6, t.$7});",
       "    });"
     ],
     "description": "Creacion de llave Compuesta"
   },
 "las dependencias requeridas para el backend": {
   "prefix": "Depedencias necesarias",
   "body": [
     "/*",
     "API:",
     "AspNetCoreRateLimit",
     "AutoMapper.Extensions.Microsoft.DependencyInjection",
     "Microsoft.AspNetCore.Authentication.JwtBearer",
     "Microsoft.AspNetCore.Mvc.Versioning",
     "Microsoft.AspNetCore.OpenApi",
     "Microsoft.EntityFrameworkCore.Design",
     "System.IdentityModel.Tokens.Jwt",
     "",
     "DOMINIO:",
     "FluentValidation.AspNetCore",
     "itext7.pdfhtml",
     "Microsoft.EntityFrameworkCore",
     "",
     "PERSISTENCIA:",
     "Microsoft.EntityFrameworkCore",
     "Pomelo.EntityFrameworkCore.MySql",
     "*/"
   ],
   "description": "las dependencias requeridas para el backend"
   },
   "metodo del dbContext que debe inyectarse en el Program ANTES DEL app": {
     "prefix": "AddDbContext",
     "body": [
       "builder.Services.AddDbContext<ApiContext>(options =>",
       "{",
       "    string connectionString = builder.Configuration.GetConnectionString(\"ConexMysql\");",
       "    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
       "});"
     ],
     "description": "metodo del dbContext que debe inyectarse en el Program"
   },
   "crear la migracion": {
     "prefix": "CreateMigrations",
     "body": [
       "/* dotnet ef migrations add InitialCreate --project .\\Persistencia\\ --startup-project ./API/ --output-dir ./Data/Migrations",
       " */"
     ],
     "description": "crear la migracion"
     },
     "updatear la migracion": {
     "prefix": "UpdateMigrations",
     "body": [
       "/*dotnet ef database update --project ./Persistencia/ --startup-project ./API/",
       " */"
     ],
     "description": "updatear la migracion"
   },
     "metodo Post": {
     "prefix": "Post",
     "body": [
       "[HttpPost]",
       "[ProducesResponseType(StatusCodes.Status201Created)]",
       "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
       "",
       "public async Task<ActionResult<$1>> Post($1 $2Dto)",
       "{",
       "var $2= this.mapper.Map<$4>($2Dto);",
       "this.unitofwork.$3.Add($2);",
       "await unitofwork.SaveAsync();",
       "if($2 == null)",
       "{",
       "   return BadRequest();",
       "}",
       "$2Dto.Id = $2.Id;",
       "return CreatedAtAction(nameof(Post), new {id =$2Dto.Id}, $2Dto);",
       "}"
     ],
     "description": "metodo Put"
     },
     "metodo Put": {
     "prefix": "Put",
     "body": [
       "[HttpPut(\"{id}\")]",
       "[ProducesResponseType(StatusCodes.Status200OK)]",
       "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
       "[ProducesResponseType(StatusCodes.Status404NotFound)]",
       "",
       "public async Task<ActionResult<$1>> Put(int id, [FromBody]$1 $2Dto){",
       "   if($2Dto== null)",
       "   {",
       "       return NotFound();",
       "   }",
     "    var $2= this.mapper.Map<$3>($2Dto);",
     "    unitofwork.$4.Update($2);",
     "    await unitofwork.SaveAsync();",
     "    return $2Dto;",
       "}"
     ],
     "description": "metodo Put"
     },
     "metodo Delete": {
     "prefix": "Delete",
     "body": [
       "[HttpDelete(\"{id}\")]",
       "[ProducesResponseType(StatusCodes.Status204NoContent)]",
       "[ProducesResponseType(StatusCodes.Status404NotFound)]",
       "public async Task<IActionResult> Delete(int id){",
       "   var $1= await unitofwork.$2.GetByIdAsync(id);",
       "   if($1== null)",
       "   {",
       "      return NotFound();",
       "   }",
       "   unitofwork.$2.Remove($1);",
       "   await unitofwork.SaveAsync();",
       "   return NoContent();",
       "}"
     ],
     "description": "metodo Delete"
   },
     "Configuracion configuracion en especifico": {
     "prefix": "ControllerEspecifico",
     "body": [
       ": BaseApiController",
       "{",
       "    private readonly IUnitOfWork unitofwork;",
       "    private readonly  IMapper mapper;",
       "",
       "    public $1Controller(IUnitOfWork unitofwork, IMapper mapper)",
       "    {",
       "        this.unitofwork = unitofwork;",
       "        this.mapper = mapper;",
       "    }",
     "}"
     ],
     "description": "Configuracion configuracion en especifico"
     },
   "ConfigureUnitOfWork": {
     "prefix": "UnitOfWork",
     "body": [
       ": IUnitOfWork, IDisposable",
       "{",
       "    private readonly $5 context;",
       "    private $1 $2;",
       "    public UnitOfWork($5 _context)",
       "    {",
       "        context = _context;",
       "    }",
       "    public $3 $4",
       "    {",
       "        get{",
       "            if($2== null){",
       "                $2= new $1(context);",
       "            }",
       "            return $2;",
       "        }",
       "    }",
       "    public void Dispose()",
       "    {",
       "        context.Dispose();",
       "    }",
       "    public async Task<int> SaveAsync()",
       "    {",
       "        return await context.SaveChangesAsync();",
       "    }",
       "}",
       ""
     ],
     "description": "ConfigureUnitOfWork"
    }
 }